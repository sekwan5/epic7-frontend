import { PageTitle } from "@/components/common/PageTitle";
import { Option, SelectBox } from "@/components/common/SelectBox";
import EqBox from "@/components/gear/enhance/EqBox";
import { useState } from "react";
import { options2, options3 } from "../owner/hook";
import { generateAutoOption } from "./hook";

export interface IOption {
  key: string;
  value: string;
  label: string;
  count?: number;
  addValue?: number;
}

export interface ISelectedOption {
  parts: string;
  mainOption: IOption;
  subOption1: IOption;
  subOption2: IOption;
  subOption3: IOption;
  subOption4: IOption;
}

const initialOption: IOption = {
  key: "",
  label: "",
  value: "",
  count: 0,
  addValue: 0,
};

const initialSelectedOption: ISelectedOption = {
  parts: "weapon",
  mainOption: { key: "atk", label: "공격력", value: "100" },
  subOption1: initialOption,
  subOption2: initialOption,
  subOption3: initialOption,
  subOption4: initialOption,
};

const baseOption = {
  weapon: { key: "atk", label: "공격력", value: "100" },
  helm: { key: "hp", label: "생명력", value: "540" },
  armor: { key: "def", label: "방어력", value: "60" },
  neck: { key: "chd", label: "치명피해", value: "12%" },
  ring: { key: "atk", label: "공격력", value: "12%" },
  boot: { key: "spd", label: "속도", value: "8" },
};

const partsOptions = [
  { value: "weapon", label: "무기" },
  { value: "helm", label: "투구" },
  { value: "armor", label: "갑옷" },
  { value: "neck", label: "목걸이" },
  { value: "ring", label: "반지" },
  { value: "boot", label: "신발" },
];

export default function GearEnhanceWrap() {
  const [enhanceOptions, setEnhanceOptions] = useState<ISelectedOption>(
    initialSelectedOption,
  );
  const [selectedOption, setSelectedOption] = useState<ISelectedOption>(
    initialSelectedOption,
  );

  const handleChange = (event: Option | null, index?: number) => {
    if (index === undefined) {
      handlePartsChange(event);
    } else {
      handleOptionChange(event, index);
    }
  };

  const handlePartsChange = (event: Option | null) => {
    const partValue = event?.value ?? "";
    const newMainOption = getMainOptionForPart(partValue);

    const updateOption = (prevValue: ISelectedOption) => ({
      ...prevValue,
      parts: partValue,
      mainOption: newMainOption,
    });

    setSelectedOption(updateOption);
    setEnhanceOptions(updateOption);
  };

  const getMainOptionForPart = (part: string): IOption => {
    return baseOption[part as keyof typeof baseOption] || initialOption;
  };

  const handleOptionChange = (event: Option | null, index: number) => {
    const newOption = {
      key: event?.value ?? "",
      label: event?.label ?? "",
    };

    const updateOption = (prevValue: ISelectedOption) => {
      if (index === 0) {
        return {
          ...prevValue,
          mainOption: { ...prevValue.mainOption, ...newOption },
        };
      } else {
        const optionKey = `subOption${index}` as keyof ISelectedOption;
        return {
          ...prevValue,
          [optionKey]: { ...(prevValue[optionKey] as IOption), ...newOption },
        };
      }
    };

    setSelectedOption(updateOption);
    setEnhanceOptions(updateOption);
  };

  const handleInputChange = (
    event: React.ChangeEvent<HTMLInputElement>,
    index: number,
  ) => {
    const newValue = event.target.value.replace(/[^0-9%]/g, "");

    const updateOption = (prevValue: ISelectedOption) => {
      if (index === 0) {
        return {
          ...prevValue,
          mainOption: { ...prevValue.mainOption, value: newValue },
        };
      } else {
        const optionKey = `subOption${index}` as keyof ISelectedOption;
        return {
          ...prevValue,
          [optionKey]: {
            ...(prevValue[optionKey] as IOption),
            value: newValue,
          },
        };
      }
    };

    setSelectedOption(updateOption);
    setEnhanceOptions(updateOption);
  };
  const handleAutoGenerate = () => {
    const autoGeneratedOption = generateAutoOption(selectedOption.parts);
    console.log(autoGeneratedOption);
    setSelectedOption(autoGeneratedOption);
    setEnhanceOptions(autoGeneratedOption);
  };
  return (
    <div className="container gear-enhance">
      <div className="gear-enhance-wrap">
        <PageTitle depth="gear">
          <h2>장비 강화 시뮬레이터</h2>
        </PageTitle>
        <div className="gear-enhance-content">
          <EqBox selectedOption={enhanceOptions} />
          <div className="select-box-wrap">
            <SelectBox
              options={partsOptions}
              label="부위"
              value={selectedOption.parts}
              onChange={(e) => handleChange(e)}
              useInput={false}
            />
            <SelectBox
              options={options2}
              label="주옵션"
              disabled={["weapon", "helm", "armor"].includes(
                selectedOption.parts,
              )}
              value={selectedOption.mainOption.key}
              inputValue={selectedOption.mainOption.value}
              onChange={(e) => handleChange(e, 0)}
              handleInputChange={(e) => handleInputChange(e, 0)}
            />
            {[1, 2, 3, 4].map((index) => {
              const subOptionKey = `subOption${index}` as keyof ISelectedOption;
              const subOption = selectedOption[subOptionKey] as IOption;
              return (
                <SelectBox
                  key={subOptionKey}
                  options={options3}
                  label="부옵션"
                  value={subOption.key}
                  inputValue={subOption.value}
                  onChange={(e) => handleChange(e, index)}
                  handleInputChange={(e) => handleInputChange(e, index)}
                />
              );
            })}
            <div className="enhance-button-wrap">
              <button className="enhance-button-1">강화</button>
              <button className="enhance-button-2" onClick={handleAutoGenerate}>
                자동생성
              </button>
              <button className="enhance-button-3">판매</button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
